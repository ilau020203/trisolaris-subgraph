enum PairType {
  CONSTANT_PRODUCT_POOL
}

type Factory @entity {
  " Contract address "
  id: ID!
  " Factory type "
  type: PairType!
  " Pair count "
  pairCount: BigInt!
  " Token count "
  tokenCount: BigInt!
}


type Token @entity {
  " Token address "
  id: ID!
  " Symbol of the token "
  symbol: String!
  " if symbol was successfully retrieved "
  symbolSuccess: Boolean!
  " Name of the token "
  name: String!
  " if name was successfully retrieved "
  nameSuccess: Boolean!
  " Decimals of the token "
  decimals: BigInt!
  " if decimals were successfully retrieved "
  decimalsSuccess: Boolean!

  " Liquidity "
  liquidity: BigInt!
  " Liquidity in native "
  liquidityNative: BigDecimal!
  " Liquidity in USD "
  liquidityUSD: BigDecimal!
  " Volume "
  volume: BigDecimal!
  " All pairs where this token is involved in "
  pairs: [_TokenPair!]! @derivedFrom(field: "token")
}

type _TokenPair @entity(immutable: true) {
  " id is created by combining token.id and count, e.g. 0x00x00:1 "
  id: ID!
  " Pair "
  pair: Pair!
  " Token "
  token: Token!
}

type Pair @entity {
  " Pair address (contract address) "
  id: ID!
  " Pair type "
  type: PairType!
  " name of the pair, this combines symbol of both tokens, e.g. WETH/SUSHI "
  name: String!
  " First Token "
  token0: Token!
  " Second Token "
  token1: Token!
  createdAtBlock: BigInt!
  " When this pair was created "
  createdAtTimestamp: BigInt!
  volumeToken0: BigDecimal!
  # volume token1
  volumeToken1: BigDecimal!
  # " Pair Day Snapshot "
  # daySnapshots: [PairDaySnapshot!]! @derivedFrom(field: "pair")

}




# type Swap @entity {
#   # transaction hash - index of swap in transaction swaps array
#   id: ID!
#   transaction: Transaction!
#   timestamp: BigInt! # need this to pull recent txns for specific token or pair
#   pair: Pair!

#   # populated from the Swap event
#   sender: String!
#   tokenIn: Token!
#   tokenOut: Token!
#   amountIn: BigDecimal!
#   amountOut: BigDecimal!
# }


# type Transaction @entity {
#   " Tx hash "
#   id: ID!
#   gasLimit: BigInt!
#   gasPrice: BigInt!
#   # This is not the reverse of Mint.transaction; it is only used to
#   # track incomplete mints (similar for burns and swaps)
#   swaps: [Swap!]!
#   createdAtBlock: BigInt!
#   createdAtTimestamp: BigInt!
# }


# type PairDaySnapshot @entity {
#   " {pairId}-day-{timestamp} "
#   id: ID!
#   pair: Pair!
#   date: Int!

#   volumeToken0: BigDecimal!
#   volumeToken1: BigDecimal!

# }
